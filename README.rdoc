= Sanitize

Sanitize is a whitelist-based HTML sanitizer. Given a list of acceptable
elements and attributes, Sanitize will remove all unacceptable HTML from a
string.

Using a simple configuration syntax, you can tell Sanitize to allow certain
elements, certain attributes within those elements, and even certain URL
protocols within attributes that contain URLs. Any HTML elements or attributes
that you don't explicitly allow will be removed.

Because it's based on Nokogiri, a full-fledged HTML parser, rather than a bunch
of fragile regular expressions, Sanitize has no trouble dealing with malformed
or maliciously-formed HTML. When in doubt, Sanitize always errs on the side of
caution.

*Author*::    Ryan Grove (mailto:ryan@wonko.com)
*Version*::   1.1.0 (2009-10-11)
*Copyright*:: Copyright (c) 2009 Ryan Grove. All rights reserved.
*License*::   MIT License (http://opensource.org/licenses/mit-license.php)
*Website*::   http://github.com/rgrove/sanitize

== Requires

* Nokogiri
* libxml2 >= 2.7.2

== Installation

Latest stable release:

  gem install sanitize

Latest development version:

  gem install sanitize -s http://gemcutter.org --prerelease

== Usage

If you don't specify any configuration options, Sanitize will use its strictest
settings by default, which means it will strip all HTML.

  require 'rubygems'
  require 'sanitize'

  html = '<b><a href="http://foo.com/">foo</a></b><img src="http://foo.com/bar.jpg" />'

  Sanitize.clean(html) # => 'foo'

== Configuration

In addition to the ultra-safe default settings, Sanitize comes with three other
built-in modes.

=== Sanitize::Config::RESTRICTED

Allows only very simple inline formatting markup. No links, images, or block
elements.

  Sanitize.clean(html, Sanitize::Config::RESTRICTED) # => '<b>foo</b>'

=== Sanitize::Config::BASIC

Allows a variety of markup including formatting tags, links, and lists. Images
and tables are not allowed, links are limited to FTP, HTTP, HTTPS, and mailto
protocols, and a <code>rel="nofollow"</code> attribute is added to all links to
mitigate SEO spam.

  Sanitize.clean(html, Sanitize::Config::BASIC)
  # => '<b><a href="http://foo.com/" rel="nofollow">foo</a></b>'

=== Sanitize::Config::RELAXED

Allows an even wider variety of markup than BASIC, including images and tables.
Links are still limited to FTP, HTTP, HTTPS, and mailto protocols, while images
are limited to HTTP and HTTPS. In this mode, <code>rel="nofollow"</code> is not
added to links.

  Sanitize.clean(html, Sanitize::Config::RELAXED)
  # => '<b><a href="http://foo.com/">foo</a></b><img src="http://foo.com/bar.jpg" />'

=== Custom Configuration

If the built-in modes don't meet your needs, you can easily specify a custom
configuration:

  Sanitize.clean(html, :elements => ['a', 'span'],
      :attributes => {'a' => ['href', 'title'], 'span' => ['class']},
      :protocols => {'a' => {'href' => ['http', 'https', 'mailto']}})

==== :elements

Array of element names to allow. Specify all names in lowercase.

  :elements => [
    'a', 'b', 'blockquote', 'br', 'cite', 'code', 'dd', 'dl', 'dt', 'em',
    'i', 'li', 'ol', 'p', 'pre', 'q', 'small', 'strike', 'strong', 'sub',
    'sup', 'u', 'ul'
  ]

==== :attributes

Attributes to allow for specific elements. Specify all element names and
attributes in lowercase.

  :attributes => {
    'a'          => ['href', 'title'],
    'blockquote' => ['cite'],
    'img'        => ['alt', 'src', 'title']
  }

If you'd like to allow certain attributes on all elements, use the symbol
<code>:all</code> instead of an element name.

  :attributes => {
    :all => ['class'],
    'a'  => ['href', 'title']
  }

==== :add_attributes

Attributes to add to specific elements. If the attribute already exists, it will
be replaced with the value specified here. Specify all element names and
attributes in lowercase.

  :add_attributes => {
    'a' => {'rel' => 'nofollow'}
  }

==== :protocols

URL protocols to allow in specific attributes. If an attribute is listed here
and contains a protocol other than those specified (or if it contains no
protocol at all), it will be removed.

  :protocols => {
    'a'   => {'href' => ['ftp', 'http', 'https', 'mailto']},
    'img' => {'src'  => ['http', 'https']}
  }

If you'd like to allow the use of relative URLs which don't have a protocol,
include the symbol <code>:relative</code> in the protocol array:

  :protocols => {
    'a' => {'href' => ['http', 'https', :relative]}
  }

==== :object_urls

URL prefixes to allow specific flash embed codes.  This can be used to allow
standard video embeds such as provided by YouTube:

  :object_urls => ['http://www.youtube.com']

*Warning* Do not under any circumstances add 'object' or 'embed' to the standard
config.  It is unnecessary and will open an XSS hole.

Because object tags are more complex than most other tags and include many
XSS attack vectors, this functionality follows a completely different code path
from the regular filtering. There is a secondary configuration variable that
controls what is allowed on the object tag and its descendents, by default it
is:

  :object_config => {
    :elements => ['object', 'param', 'embed'],
    :attributes => {
      'object' => ['width', 'height'],
      'param'  => ['name', 'value'],
      'embed'  => ['src', 'type', 'allowscriptaccess', 'allowfullscreen',
                   'width', 'height']
  }}

This config is applied to the object tag and all of its immediate descendents
instead of the standard config.  This initial configuration was crafted specifically
to allow YouTube and Vimeo embed codes in this format:

  <object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/qVaEPx_VyXs&hl=en&fs=1&color1=0xcc2550&color2=0xe87a9f"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/qVaEPx_VyXs&hl=en&fs=1&color1=0xcc2550&color2=0xe87a9f" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object>


== Contributors

The following lovely people have contributed to Sanitize in the form of patches
or ideas that later became code:

* Peter Cooper <git@peterc.org>
* Gabe da Silveira <gabe@websaviour.com>
* Ryan Grove <ryan@wonko.com>
* Adam Hooper <adam@adamhooper.com>
* Mutwin Kraus <mutle@blogage.de>
* Dev Purkayastha <dev.purkayastha@gmail.com>
* Ben Wanicur <bwanicur@verticalresponse.com>

== License

Copyright (c) 2009 Ryan Grove <ryan@wonko.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the 'Software'), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
